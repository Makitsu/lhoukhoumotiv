/**
 * Lhoukhoum
 * Lhoukhoumotiv server to display interesting day about travelling
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TripService {

    protected basePath = 'https://lhoukhoume.swagger.io/v2';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Retrieve trip information
     * 
     * @param departureStation date to look for information, default is today
     * @param departureDateRange departure date range (for instance 21/04/2021 between 8am and 10am )
     * @param arrivalStation arrival train station (optional)
     * @param params list of additional parameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTrips(departureStation: string, departureDateRange: string, arrivalStation?: string, params?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getTrips(departureStation: string, departureDateRange: string, arrivalStation?: string, params?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getTrips(departureStation: string, departureDateRange: string, arrivalStation?: string, params?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getTrips(departureStation: string, departureDateRange: string, arrivalStation?: string, params?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (departureStation === null || departureStation === undefined) {
            throw new Error('Required parameter departureStation was null or undefined when calling getTrips.');
        }

        if (departureDateRange === null || departureDateRange === undefined) {
            throw new Error('Required parameter departureDateRange was null or undefined when calling getTrips.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (departureStation !== undefined && departureStation !== null) {
            queryParameters = queryParameters.set('departure_station', <any>departureStation);
        }
        if (departureDateRange !== undefined && departureDateRange !== null) {
            queryParameters = queryParameters.set('departure_date_range', <any>departureDateRange);
        }
        if (arrivalStation !== undefined && arrivalStation !== null) {
            queryParameters = queryParameters.set('arrival_station', <any>arrivalStation);
        }
        if (params) {
            params.forEach((element) => {
                queryParameters = queryParameters.append('params', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/trip`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve map generated from trip information
     * 
     * @param departureStation date to look for information, default is today
     * @param departureDateRange departure date range (for instance between 8am and 10am)
     * @param arrivalStation arrival train station (optional)
     * @param params list of additional parameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTripsMap(departureStation: string, departureDateRange: string, arrivalStation?: string, params?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getTripsMap(departureStation: string, departureDateRange: string, arrivalStation?: string, params?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getTripsMap(departureStation: string, departureDateRange: string, arrivalStation?: string, params?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getTripsMap(departureStation: string, departureDateRange: string, arrivalStation?: string, params?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (departureStation === null || departureStation === undefined) {
            throw new Error('Required parameter departureStation was null or undefined when calling getTripsMap.');
        }

        if (departureDateRange === null || departureDateRange === undefined) {
            throw new Error('Required parameter departureDateRange was null or undefined when calling getTripsMap.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (departureStation !== undefined && departureStation !== null) {
            queryParameters = queryParameters.set('departure_station', <any>departureStation);
        }
        if (departureDateRange !== undefined && departureDateRange !== null) {
            queryParameters = queryParameters.set('departure_date_range', <any>departureDateRange);
        }
        if (arrivalStation !== undefined && arrivalStation !== null) {
            queryParameters = queryParameters.set('arrival_station', <any>arrivalStation);
        }
        if (params) {
            params.forEach((element) => {
                queryParameters = queryParameters.append('params', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/trip/map`,
            {
                params: queryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
